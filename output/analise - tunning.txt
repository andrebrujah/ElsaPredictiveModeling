VALORES EM ORDEM:
- parâmetros testados
- média AUC 
- desvio padrao AUC
- ponto de corte com melhor média de AB (Acurácia Balanceada)
- média de AB
- desvio padrao AB (em alguns casos eu nao copiei esse valor, mas está tudo gravado)

################################################## RANDOM FOREST #########################

## RF 1:
 ntree.vector <- c(5, 50, 100, 250, 500, 750, 1000);
 
categorização/discretização:
1000	0.707427556	0.021302265	0.11	0.656495464
750	0.706898597	0.020920794	0.12	0.654012775
500	0.705810925	0.021352171	0.11	0.654659464
250	0.705190429	0.021439092	0.12	0.652217709

semtransf:
1000	0.727250946	0.01969461	0.13	0.673152569
750	0.726635899	0.020280425	0.13	0.672108561
500	0.726113808	0.02080544	0.13	0.67109442
250	0.725155024	0.021827979	0.14	0.670303655

## RF 2:  
  ntree.vector <- c(900, 1000, 1100, 1200, 1500);

categorização/discretização:
1200	0.70763864	0.021145451	0.12	0.656368329	0.021106256
1100	0.707533706	0.020955347	0.12	0.656588008	0.020651909
1000	0.707427556	0.021302265	0.11	0.656495464	0.019342855
1500	0.707383612	0.021139955	0.12	0.657043371	0.020612242

semtransf:
1500	0.727803078	0.019638519	0.13	0.672694278	0.020300165
1100	0.727615811	0.019793018	0.13	0.673322388	0.02089055
1200	0.727488495	0.019688296	0.13	0.672517847	0.021320839
1000	0.727250946	0.01969461	0.13	0.673152569	0.020838671

## RF 3:
  ntree.vector <- c(1150, 1250, 1450, 1550, 1600, 1700, 1800, 1900, 2000);

categorização/discretização:
2000	0.707706079	0.021344166	0.12	0.656481154	0.022161274
1900	0.707637216	0.021329055	0.12	0.656420421	0.021649616
1150	0.707617348	0.021133187	0.12	0.656175178	0.021016192
1800	0.707606425	0.021146085	0.12	0.657262968	0.021454953

semtransf:
1900	0.728105032	0.019660576	0.13	0.672045157	0.021220455
1600	0.728017902	0.01964903	0.14	0.672527021	0.021193821
2000	0.728015435	0.019600948	0.15	0.671450281	0.023003372
1550	0.727980907	0.019557113	0.14	0.672072824	0.021567557

## RF 4:
  ntree.vector <- c(1950, 2050, 2100, 2250, 2500);

categorização/discretização: 
2500	0.70794841	0.021168442	0.12	0.656122803	0.022105648
2100	0.707790364	0.021388511	0.12	0.656331031	0.022783162
2050	0.707754706	0.021422507	0.12	0.656506828	0.022210109
2250	0.707743323	0.021262447	0.11	0.655682409	0.019938885

semtransf:
2500	0.728235932	0.019988668	0.13	0.671855955	0.021440575
2250	0.728186146	0.019910538	0.13	0.672156411	0.021721611
2100	0.728132977	0.019743669	0.13	0.671713526	0.020901332
2050	0.728094752	0.019605435	0.15	0.671696819	0.022794034

## RF 5:
  ntree.vector <- c(2400, 2600, 2700, 2800, 2900, 3000);

categorização/discretização:
3000	0.708256413	0.021142156	0.11	0.657276644	0.02044475
2900	0.708165634	0.021049386	0.12	0.656208869	0.022164836
2800	0.708101417	0.021134781	0.11	0.656108399	0.01990404

semtransf:
2900	0.728488119	0.019762873	0.12	0.67185195	0.023270334
3000	0.728476468	0.019735828	0.14	0.671509063	0.022005767
2800	0.728455889	0.019720129	0.15	0.671283419	0.023731196
2700	0.728338395	0.019848305	0.12	0.671659121	0.022331021

## RF 6:
  ntree.vector <- c(2850, 2950, 3100, 3500);

categorização/discretização:
3500	0.708390896	0.021156388	0.12	0.656226067	0.021975635
3100	0.70833909	0.021222344	0.11	0.656603805	0.021137885

semtrasnf:
3500	0.728608519	0.019728603	0.12	0.672399266	0.023575547
3100	0.72852274	0.019726349	0.13	0.672218686	0.020510662

## RF 7:
  ntree.vector <- c(3400, 3600, 3800, 4000);

categorização/discretização:
3600	0.708434793	0.021259238	0.12	0.6562047	0.022341408
3400	0.708368761	0.021291007	0.12	0.656723357	0.021012168
4000	0.708330404	0.021257081	0.12	0.656115465	0.022565698

semtransf:
4000	0.728899416	0.019511225	0.12	0.671962185	0.022973111
3800	0.728738161	0.019573275	0.13	0.672107734	0.021162882
3600	0.728697512	0.019699014	0.12	0.67181411	0.022297925
3400	0.728520261	0.019692323	0.12	0.672133729	0.023831924

## RF 8:
  ntree.vector <- c(3700, 3900, 4250, 4500, 4750, 5000);

categorização/discretização:
5000	0.708462793	0.021080609	0.11	0.655551698	0.020628672
3700	0.708376002	0.021329461	0.12	0.656510685	0.022179737
4750	0.708368054	0.021105758	0.12	0.656460639	0.021312611

semtransf:
4250	0.729025207	0.01939911	0.13	0.672696922	0.020497684
4500	0.728974709	0.019382378	0.14	0.672052385	0.022948589
5000	0.728872449	0.019405718	0.13	0.673026431	0.021442162
4750	0.728853576	0.01941658	0.13	0.672981704	0.021616077

## RF 9:
  ntree.vector <- c(4150, 4250, 4350, 4900, 5000, 5100, 5500, 6000);

categorização/discretização:
6000	0.708520033	0.021005194	0.12	0.656009766	0.021014661
5100	0.708495054	0.021102133	0.12	0.656750417	0.020777415
5500	0.708494846	0.020988706	0.11	0.655810706	0.021963055
4900	0.708387077	0.021098997	0.12	0.655892737	0.021231339

semtransf:
4250	0.729025207	0.01939911	0.13	0.672696922	0.020497684
4350	0.728991863	0.019385567	0.13	0.672504257	0.020482626
4150	0.728991811	0.019453769	0.13	0.672087202	0.020497047

## RF 10:
  ntree.vector <- c(4200, 4300, 5750, 6250, 6500, 6750, 7000);

categorização/discretização:
7000	0.708524221	0.021171266	0.12	0.65553401	0.021097743 MELHOR RESULTADO categorização/discretização (nao vale a pena tentar mais, o ganho está sendo de 0,000004 com relação ao segundo melhor de 6000, além de que não está sendo linear o crescimento)
5750	0.708513092	0.020971844	0.12	0.656202569	0.020977046
6250	0.708504645	0.02096816	0.12	0.656317744	0.02148094
6500	0.708490133	0.021045926	0.12	0.656273044	0.020636991

semtransf:
4300	0.729041508	0.019379417	0.13	0.672367008	0.020560238  MELHOR RESULTADO SEMTRANSF ******


################################################## REGRESSÃO LOGÍSTICA #########################

 
## GLM 1:
  epsilon.vector <- c(0.0001, 0.01, 0.1, 0.5, 0.9);  

categorização/discretização:
2	50	0.01	0.740060927	0.019769186	0.11	0.677411198

semtransf:
2	50	0.01	0.749841217	0.018111546	0.11	0.684613851 MELHOR RESULTADO ******

OK

################################################## K-NEAREST NEIGHBOR #########################


## KNN 1:
  neighbor.vector <- c(5, 10, 50, 100, 200, 300, 400, 450, 500);
  min.votes.vector <- c(0,1);
  
categorização/discretização:
0	200	0.735737672	0.020383951	0.09	0.67454021
1	200	0.735737672	0.020383951	0.09	0.
0	300	0.73570824	0.021022439	0.09	0.675535185
0	100	0.731184102	0.021426014	0.1	0.668530859
0	50	0.719179804	0.021192815	0.1	0.661085692

semtransf:
0	450	0.744006669	0.02047255	0.1	0.68572242
1	450	0.744006669	0.02047255	0.1	0.68572242
0	400	0.742270827	0.020762784	0.1	0.682487313
0	300	0.739124617	0.020927038	0.1	0.679573764
0	200	0.736318578	0.021590898	0.1	0.675558153
0	100	0.733516045	0.021979972	0.1	0.670763575


## KNN 2:
  neighbor.vector <- c(150, 175, 200, 225, 250, 425, 450, 475);
  min.votes.vector <- c(0);

categorização/discretização:
0	250	0.735759267	0.020458795	0.09	0.674782423	0.023653248
0	200	0.735737672	0.020383951	0.09	0.67454021	0.022670495
0	225	0.735377891	0.020262054	0.09	0.675029842	0.022647142
0	175	0.734325131	0.020525779	0.1	0.674175401	0.021226281

semtransf:
0	475	0.744450811	0.02050595	0.1	0.685916485	0.019927953
0	450	0.744006669	0.02047255	0.1	0.68572242	0.019970419
0	425	0.743137855	0.020626148	0.1	0.683554566	0.018560289
0	250	0.739328371	0.021997571	0.1	0.683930608	0.020512259

## KNN 3:
  neighbor.vector <- c(240, 260, 275, 470, 480, 490, 500, 525, 550, 600);
  min.votes.vector <- c(0);
  
categorização/discretização:
275	0.735999683	0.021075691	0.09	0.675508234	0.022997617 MELHOR RESULTADO categorização/discretização
260	0.735782419	0.020752638	0.09	0.675024333	0.023697607
240	0.735699723	0.020669543	0.09	0.674129317	0.023315615

semtransf:
480	0.744437838	0.020531971	0.1	0.686298119	0.019743321
470	0.744397696	0.020365406	0.1	0.686165167	0.018775213
490	0.744183043	0.020704581	0.1	0.686792212	0.019884162
275	0.739628027	0.021449152	0.1	0.680740482	0.021215074

## KNN 4:
  neighbor.vector <- c(280, 285, 290, 295, 475, 485);
  min.votes.vector <- c(0);
  
categorização/discretização: 
280	0.73593179	0.021274523	0.09	0.675968703	0.023439417 NAO MELHOROU
290	0.735776908	0.021028528	0.09	0.675750961	0.02328158
285	0.735753973	0.02128179	0.09	0.675838699	0.02384159

semtransf:
475	0.744450811	0.02050595	0.1	0.685916485	0.019927953 MELHOR RESULTADO SEMTRANSF ******
485	0.744417448	0.020541507	0.1	0.686781243	0.020071575

################################################## NAIVE BAYES #########################

## NB 1:
  laplace.vector <- c(0, 0.00001, 0.001, 0.01, 0.1, 0.2, 0.5, 0.8);

categorização/discretização:
0.001	0.73670801	0.02261268	0.09	0.680859147

semtransf:
0.5	0.732296628	0.025818797	0.2	0.665069634

## NB 2:
  laplace.vector <- c(0.001, 0.3, 0.4, 0.5, 0.6, 0.7);

categorização/discretização:
0.001	0.73670801	0.02261268	0.09	0.680859147	0.021057912 MELHOR RESULTADO categorização/discretização ******

semtransf:
0.7	0.732300658	0.025781729	0.2	0.665198114	0.020725692
0.6	0.732296661	0.025788272	0.2	0.665155269	0.020719427
0.5	0.732296628	0.025818797	0.2	0.665069634	0.020638281

## NB 3:
  laplace.vector <- c(0.8, 0.9);
categorização/discretização:
0.8	0.735728502	0.022628298	0.09	0.680079489	0.020912332
0.9	0.735717806	0.022611334	0.09	0.680058122	0.020757269


semtransf:
0.9	0.732301995	0.02577432	0.2	0.66554305	0.020828423 
0.8	0.732295238	0.025790899	0.2	0.665326593	0.020799357

## NB 4:
  laplace.vector <- c(1);

semtransf:
1	0.732331004	0.02577342	0.31	0.677365574	0.025657936 MELHOR RESULTADO SEMTRANSF

################################################## REDES NEURAIS #########################

NNET - separado por tipo de transformação

## NNET 1 semtransf:
  size.vector <- c(0, 1, 2, 5, 10, 25, 50, 75, 100);
  decay.vector <- c(0, 1, 2, 5, 10);
  skip.vector <- c(TRUE, FALSE);  

size	decay	skip

semtransf:
100	2	0	0.752157737	0.018721525	0.12	0.689921208
25	2	0	0.752047897	0.018591253	0.12	0.690168977
75	2	0	0.752031682	0.018661972	0.12	0.689225203
50	2	0	0.752006553	0.018606244	0.12	0.691003241
25	2	1	0.751962278	0.018486546	0.09	0.689371317
...
1	2	0	0.74089522	0.019329235	0.11	0.681855836
0	1	1	0.740693983	0.019513769	0.11	0.679411485


## NNET 2 semtransf:
  size.vector <- c(90, 100, 110, 150);
  decay.vector <- c(2, 3, 4);
  skip.vector <- c(FALSE);

semtransf: 
150	2	0	0.752235039	0.018687497	0.12	0.690484584	0.023903724
100	2	0	0.752157737	0.018721525	0.12	0.689921208	0.023876608
110	2	0	0.752145052	0.018721416	0.12	0.689595271	0.02339467
90	2	0	0.7519401	0.018844727	0.12	0.689942575	0.023744354

## NNET 3 semtransf:
  size.vector <- c(125, 145, 155, 175, 200);
  decay.vector <- c(2);
  skip.vector <- c(FALSE);

semtransf: 
175	2	0	0.752386217	0.018708352	0.12	0.690396772	0.023552011  MELHOR RESULTADO SEMTRANSF ******
125	2	0	0.752352904	0.018912621	0.12	0.690460957	0.023226182
200	2	0	0.752340654	0.01888905	0.12	0.690311	0.023893015
155	2	0	0.752244257	0.018785238	0.12	0.690594065	0.023393196

## NNET 1 categorização/discretização:
  size.vector <- c(0, 1, 2, 5, 10, 25, 50, 75, 100);
  decay.vector <- c(0, 1, 2, 5, 10);
  skip.vector <- c(TRUE, FALSE);
  
categorização/discretização:
100	5	1	0.741281723	0.019498106	0.11	0.679718387
75	5	1	0.741251877	0.019500511
50	5	1	0.741245921	0.019500932
25	5	1	0.741213694	0.019523594	0.11	0.679092608
1	1	0	0.740802144	0.019307388	0.11	0.678110132
0	2	1	0.740785737	0.019469597	0.11	0.680336498


## NNET 2 categorização/discretização:
  size.vector <- c(90, 100, 110, 150);
  decay.vector <- c(3, 4, 6, 7);
  skip.vector <- c(TRUE);

categorização/discretização:
100	3	1	0.741551467	0.019376191	0.11	0.679493888	0.017070446  MELHOR RESULTADO categorização/discretização 
150	3	1	0.741533184	0.019401532	0.11	0.679099845	0.017496603
110	3	1	0.741529171	0.01941002	0.11	0.679035495	0.01763831
90	3	1	0.741519289	0.019394983	0.11	0.679187546	0.017517778

## NNET 3 factor:
  size.vector <- c(95, 105);
  decay.vector <- c(2, 3);
  skip.vector <- c(TRUE);

105	3	1	0.741517962	0.019395139	0.11	0.679035385	0.017423435 PIOROU
95	3	1	0.7415147	0.019399378	0.11	0.678714047	0.017459461
105	2	1	0.740602561	0.019144932	0.11	0.678045433	0.017982314
95	2	1	0.74053972	0.019322529	0.11	0.67852335	0.017386622

################################################## RESULTADOS FINAIS RESUMO #########################

## RF 10:
  ntree = 4300;
categorização/discretização:
7000	0.708524221	0.021171266	0.12	0.65553401	0.021097743 
semtransf:
4300	0.729041508	0.019379417	0.13	0.672367008	0.020560238 ******

## GLM 1:
  epsilon = 0.01
categorização/discretização:
2	50	0.01	0.740060927	0.019769186	0.11	0.677411198
semtransf:
2	50	0.01	0.749841217	0.018111546	0.11	0.684613851 ******

## KNN 4:
  neighbors = 475;
  min.votes = 0;
categorização/discretização:
275	0.735999683	0.021075691	0.09	0.675508234	0.022997617 
semtransf:
475	0.744450811	0.02050595	0.1	0.685916485	0.019927953  ******

## NB 2:
  laplace = 0.001
categorização/discretização:
0.001	0.73670801	0.02261268	0.09	0.680859147	0.021057912 ******
1	0.732331004	0.02577342	0.31	0.677365574	0.025657936

## NNET 3:
  size =  175;
  decay = 2;
  skip = FALSE;
semtransf: 
175	2	0	0.752386217	0.018708352	0.12	0.690396772	0.023552011 ******
categorização/discretização:
100	3	1	0.741551467	0.019376191	0.11	0.679493888	0.017070446


## NNET:
  size =  175;
  decay = 2;
  skip = FALSE;
AUC: 0.752386217	0.018708352	
PTO CORTE: 0.12	
AB: 0.690396772	0.023552011

## GLM:
  epsilon = 0.01
AUC: 0.749841217	0.018111546	
PTO CORTE: 0.11	
AB: 0.684613851 

## KNN:
  neighbors = 475;
  min.votes = 0
AUC:	0.744450811	0.02050595	
PTO CORTE: 0.1	
AB: 0.685916485	0.019927953

## NB:
  laplace = 0.001
AUC: 0.73670801	0.02261268	
PTO CORTE: 0.09	
AB: 0.680859147	0.021057912

## RF:
  ntree = 4300;
AUC: 0.729041508	0.019379417	
PTO CORTE: 0.13	
AB: 0.672367008	0.020560238



 

